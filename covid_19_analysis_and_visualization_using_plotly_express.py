# -*- coding: utf-8 -*-
"""Covid-19 Analysis and Visualization using Plotly Express.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19OSKkj875cNw9OjhIsL6PAoOi7KhWhbC
"""

import plotly.graph_objs as go
import plotly.io as pio
import plotly.express as px
import pandas as pd
import matplotlib.pyplot as plt

import plotly.offline as py
py.init_notebook_mode(connected=True)

pio.renderers.default = 'colab'

df=pd.read_csv("covid.csv")
df.head()

print(df.shape)
print(df.size)

df.info()

df1 = pd.read_csv("covid_grouped.csv")
df1.head()

print(df1.shape)
print(df1.size)

df1.info()

df1.columns

df1.drop(['New cases','New deaths','New recovered'],axis=1, inplace=True)
df1.sample(5)

from plotly.figure_factory import create_table
colorscale= [[0, 'red'],[.5, 'pink'],[1, 'lightblue']]
table = create_table(df1.head(15), colorscale=colorscale) # Use the defined colorscale variable
py.iplot(table)

px.bar(df.head(15), x = 'Country/Region',
       y = 'TotalCases',color = 'TotalCases',
       height = 500,hover_data = ['Country/Region', 'Continent'])

px.bar(df.head(15), x = 'TotalTests', y = 'Country/Region',
       color = 'TotalTests',orientation ='h',  height = 500,
       hover_data = ['Country/Region', 'Continent'])

px.scatter(df, x='Continent',y='TotalCases',
           hover_data=['Country/Region', 'Continent'],
           color='TotalCases', size='TotalCases', size_max=60)

px.scatter(df.head(57), x='Continent',y='TotalCases',
           hover_data=['Country/Region', 'Continent'],
           color='TotalCases', size='TotalCases', size_max=60, log_y=True)

px.scatter(df.head(54), x='Continent',y='TotalTests',
           hover_data=['Country/Region', 'Continent'],
           color='TotalTests', size='TotalTests', size_max=60)

px.scatter(df.head(50), x='Continent',y='TotalTests',
           hover_data=['Country/Region', 'Continent'],
           color='TotalTests', size='TotalTests', size_max=60, log_y=True)

px.scatter(df.head(50), x='Continent',y='TotalTests',
           hover_data=['Country/Region', 'Continent'],
           color='TotalTests', size='TotalTests', size_max=60, log_y=True)

px.scatter(df.head(100), x='Country/Region', y='TotalCases',
           hover_data=['Country/Region', 'Continent'],
           color='TotalCases', size='TotalCases', size_max=60)

px.scatter(df.head(30), x='Country/Region', y='TotalCases',
           hover_data=['Country/Region', 'Continent'],
           color='Country/Region', size='TotalCases', size_max=60, log_y=True)

px.scatter(df.head(10), x='Country/Region', y= 'TotalDeaths',
           hover_data=['Country/Region', 'Continent'],
           color='Country/Region', size= 'TotalDeaths', size_max=60)

px.scatter(df.head(30), x='Country/Region', y= 'Tests/1M pop',
           hover_data=['Country/Region', 'Continent'],
           color='Country/Region', size= 'Tests/1M pop', size_max=40)

px.scatter(df.head(30), x='Country/Region', y= 'Tests/1M pop',
           hover_data=['Country/Region', 'Continent'],
           color='Tests/1M pop', size= 'Tests/1M pop', size_max=40)

px.scatter(df.head(30), x='TotalCases', y= 'TotalDeaths',
           hover_data=['Country/Region', 'Continent'],
           color='TotalDeaths', size= 'TotalDeaths', size_max=80)

px.scatter(df.head(30), x='TotalCases', y= 'TotalDeaths',
           hover_data=['Country/Region', 'Continent'],
           color='TotalDeaths', size= 'TotalDeaths', size_max=80,
           log_x=True, log_y=True)

px.scatter(df.head(30), x='TotalTests', y= 'TotalCases',
           hover_data=['Country/Region', 'Continent'],
           color='TotalTests', size= 'TotalTests', size_max=80,
           log_x=True, log_y=True)

px.bar(df1, x="Date", y="Confirmed", color="Confirmed",
       hover_data=["Confirmed", "Date", "Country/Region"], height=400)

px.bar(df1, x="Date", y="Confirmed", color="Confirmed",
       hover_data=["Confirmed", "Date", "Country/Region"],log_y=True, height=400)

px.bar(df1, x="Date", y="Deaths", color="Deaths",
       hover_data=["Confirmed", "Date", "Country/Region"],
       log_y=False, height=400)

df_US= df1.loc[df1["Country/Region"]=="US"]

px.bar(df_US, x="Date", y="Confirmed", color="Confirmed", height=400)

px.bar(df_US,x="Date", y="Recovered", color="Recovered", height=400)

px.line(df_US,x="Date", y="Recovered", height=300)

px.line(df_US,x="Date", y="Confirmed", height=300)

px.choropleth(df1,
              locations="iso_alpha",
              color="Confirmed",
              hover_name="Country/Region",
              color_continuous_scale="Blues",
              animation_frame="Date")

px.choropleth(df1,
              locations='iso_alpha',
              color="Deaths",
              hover_name="Country/Region",
              color_continuous_scale="Viridis",
              animation_frame="Date" )

px.choropleth(df1,
              locations='iso_alpha',
              color="Recovered",
              hover_name="Country/Region",
              color_continuous_scale="RdYlGn",
              projection="natural earth",
              animation_frame="Date" )

px.bar(df1, x="WHO Region", y="Confirmed", color="WHO Region",
       animation_frame="Date", hover_name="Country/Region")

df2= pd.read_csv("coviddeath.csv")
df2.head()

df2.tail()

df2.groupby(["Condition"]).count()

# import word cloud
from wordcloud import WordCloud

sentences = df2["Condition"].tolist()
sentences_as_a_string = ' '.join(sentences)


# Convert the string into WordCloud
plt.figure(figsize=(10, 10))
plt.imshow(WordCloud().generate(sentences_as_a_string))

column2_tolist= df2["Condition Group"].tolist()

# Convert the list to one single string
column_to_string= " ".join(column2_tolist)

# Convert the string into WordCloud
plt.figure(figsize=(10,10))
plt.imshow(WordCloud().generate(column_to_string))